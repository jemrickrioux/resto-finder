// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?

  image             String?
  accounts          Account[]
  sessions          Session[]
  addresses         Address[] @relation(name: "Address_owned")
  favorite          Address?  @relation(name: "Address_favorite", fields: [favoriteAddressId], references: [id])
  favoriteAddressId String?   @unique
  actions           Action[]
}

enum ActionType {
  VIEW
  DISLIKE
  LIKE
  FAVORITE
  LINK_CLICK
}

model Action {
  id        String     @id @default(cuid())
  type      ActionType
  placeId   String
  place     Place      @relation(fields: [placeId], references: [id])
  userId    String?
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())

  @@unique([placeId, userId, type])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Place {
  id            String   @id @default(cuid())
  googlePlaceId String?  @unique
  name          String
  types         Json
  address       String
  phone         String
  website       String?  @db.Text
  image         String?
  lat           Float?
  lng           Float?
  priceLevel    Int
  ratings       Float
  actions       Action[]
}

model Address {
  id          String  @id @default(cuid())
  lat         Float
  lng         Float
  name        String
  favoriteFor User?   @relation(name: "Address_favorite")
  user        User?   @relation(name: "Address_owned", fields: [ownedId], references: [id])
  ownedId     String?
}
